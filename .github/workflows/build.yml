name: Build Qt Executable

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtcharts qtwebengine'
        
    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Set up CMake
      uses: lukka/get-cmake@latest
      
    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$env:Qt6_DIR
        
    - name: Build project
      run: |
        cmake --build build --config Release
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qt-2d-game-windows
        path: |
          build/Release/qt_2025_game.exe
          build/qt_2025_game.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'desktop'
        
    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        
    - name: Build project
      run: |
        cmake --build build --config Release -j$(nproc)
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qt-2d-game-linux
        path: |
          build/qt_2025_game
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'mac'
        target: 'desktop'
        
    - name: Set up CMake
      uses: lukka/get-cmake@latest
      
    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        
    - name: Build project
      run: |
        cmake --build build --config Release -j$(sysctl -n hw.ncpu)
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qt-2d-game-macos
        path: |
          build/qt_2025_game
        retention-days: 30

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find . -type f -name "*" | head -20
        ls -la
        
    - name: Prepare release files
      run: |
        mkdir -p release
        
        # Package Windows executable
        if [ -d "qt-2d-game-windows" ]; then
          echo "Packaging Windows executable..."
          cd qt-2d-game-windows
          if [ -f "qt_2025_game.exe" ]; then
            zip ../release/qt-2d-game-windows.zip qt_2025_game.exe
            cp qt_2025_game.exe ../release/
          elif [ -f "Release/qt_2025_game.exe" ]; then
            zip ../release/qt-2d-game-windows.zip Release/qt_2025_game.exe
            cp Release/qt_2025_game.exe ../release/qt_2025_game.exe
          fi
          cd ..
        fi
        
        # Package Linux executable
        if [ -d "qt-2d-game-linux" ]; then
          echo "Packaging Linux executable..."
          cd qt-2d-game-linux
          if [ -f "qt_2025_game" ]; then
            tar -czf ../release/qt-2d-game-linux.tar.gz qt_2025_game
            cp qt_2025_game ../release/qt_2025_game_linux
            chmod +x ../release/qt_2025_game_linux
          fi
          cd ..
        fi
        
        # Package macOS executable
        if [ -d "qt-2d-game-macos" ]; then
          echo "Packaging macOS executable..."
          cd qt-2d-game-macos
          if [ -f "qt_2025_game" ]; then
            tar -czf ../release/qt-2d-game-macos.tar.gz qt_2025_game
            cp qt_2025_game ../release/qt_2025_game_macos
            chmod +x ../release/qt_2025_game_macos
          fi
          cd ..
        fi
        
        echo "Release files prepared:"
        ls -la release/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Qt 2D Game ${{ steps.version.outputs.version }}"
        body: |
          ## ðŸŽ® Qt 2D Game Release ${{ steps.version.outputs.version }}
          
          **Platform Support:**
          - âœ… Windows (x64)
          - âœ… Linux (x64) 
          - âœ… macOS (x64)
          
          **Download Instructions:**
          - **Windows**: Download `qt_2025_game.exe` or `qt-2d-game-windows.zip`
          - **Linux**: Download `qt_2025_game_linux` or `qt-2d-game-linux.tar.gz`
          - **macOS**: Download `qt_2025_game_macos` or `qt-2d-game-macos.tar.gz`
          
          **System Requirements:**
          - Qt 6.5.3 runtime libraries (usually pre-installed)
          - Modern GPU with OpenGL support
          - 4GB RAM minimum
          
          **Game Features:**
          - 2D fighting game with physics
          - Dual character support (Player 1 & Player 2)
          - Weapon system (Pistol, Shotgun, Knife, Ball, etc.)
          - Medicine and armor systems
          - Platform jumping mechanics
          
          ---
          *Built from commit: ${{ github.sha }}*
        files: release/*
        draft: false
        prerelease: ${{ !contains(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
